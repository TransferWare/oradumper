/* -*-mode: c-*- */

#define LINT_FLAGS_PROC_BEGIN \
/*@-shadow@*/ \
/*@-fullinitblock@*/ \
/*@-immediatetrans@*/ \
/*@-statictrans@*/ \
/*@-unqualifiedtrans@*/ \
/*@-nullpass@*/ \
/*@-nullstate@*/ \
/*@-compdef@*/ \
/*@-compdestroy@*/ \
/*@-globstate@*/ \
/*@-observertrans@*/ \
/*@-varuse@*/

#define LINT_FLAGS_PROC_END \
/*@=shadow@*/ \
/*@=fullinitblock@*/ \
/*@=immediatetrans@*/ \
/*@=statictrans@*/ \
/*@=unqualifiedtrans@*/ \
/*@=nullpass@*/ \
/*@=nullstate@*/ \
/*@=compdef@*/ \
/*@=compdestroy@*/ \
/*@=globstate@*/ \
/*@=observertrans@*/ \
/*@=varuse@*/

#if HAVE_CONFIG_H
#include <config.h>
#endif

#include <stdio.h>

#if HAVE_STDLIB_H
#include <stdlib.h>
#endif

#if HAVE_STRING_H
#include <string.h>
#endif

#if HAVE_SQLCPR_H
#include <sqlcpr.h>
#endif

/*EXEC SQL INCLUDE "oci.h";*/

/* include dmalloc as last one */
#ifdef WITH_DMALLOC
#include <dmalloc.h>
#endif

#include "oradumper.h"

#define varchar_defined 1

LINT_FLAGS_PROC_BEGIN;
EXEC SQL INCLUDE "oradumper_int.h";
LINT_FLAGS_PROC_END;

/* declare a structure */
#ifdef SQLCA_NONE 
#undef SQLCA_NONE 
#endif

#ifdef SQLCA_STORAGE_CLASS
#undef SQLCA_STORAGE_CLASS
#endif

#define SQLCA_STORAGE_CLASS 

/* force initialisation of the static sqlca struct */
#ifndef SQLCA_INIT
#define SQLCA_INIT
#endif

LINT_FLAGS_PROC_BEGIN;
EXEC SQL INCLUDE sqlca;
LINT_FLAGS_PROC_END;

EXEC SQL BEGIN DECLARE SECTION;
#define MAX_NAME_LEN 255
EXEC SQL END DECLARE SECTION;

#define NO_DATA_FOUND 100

error_t
orasql_connect(userid)
EXEC SQL BEGIN DECLARE SECTION;
const char *userid;
EXEC SQL VAR userid IS STRING;
EXEC SQL END DECLARE SECTION;
{
  DBUG_ENTER("orasql_connect");

  LINT_FLAGS_PROC_BEGIN;
  EXEC SQL WHENEVER SQLERROR CONTINUE;

  EXEC SQL CONNECT :userid;
  LINT_FLAGS_PROC_END;

  DBUG_PRINT("output", ("return: %d", sqlca.sqlcode));
  DBUG_LEAVE();

  return sqlca.sqlcode;
}

error_t
orasql_connected(void)
{
  DBUG_ENTER("orasql_connected");

  LINT_FLAGS_PROC_BEGIN;
  EXEC SQL WHENEVER SQLERROR CONTINUE;
  EXEC SQL EXECUTE
  begin
    null;
  end;
  END-EXEC;
  LINT_FLAGS_PROC_END;

  DBUG_PRINT("output", ("return: %d", sqlca.sqlcode));
  DBUG_LEAVE();

  return sqlca.sqlcode;
}

error_t
orasql_cache_free_all(void)
{
  DBUG_ENTER("orasql_cache_free_all");

  LINT_FLAGS_PROC_BEGIN;
  EXEC SQL WHENEVER SQLERROR CONTINUE;
  EXEC SQL CACHE FREE ALL;
  LINT_FLAGS_PROC_END;

  DBUG_PRINT("output", ("return: %d", sqlca.sqlcode));
  DBUG_LEAVE();

  return sqlca.sqlcode;
}

error_t
orasql_disconnect(void)
{
  DBUG_ENTER("orasql_disconnect");

  LINT_FLAGS_PROC_BEGIN;
  EXEC SQL WHENEVER SQLERROR CONTINUE;
  EXEC SQL COMMIT WORK RELEASE;
  LINT_FLAGS_PROC_END;

  DBUG_PRINT("output", ("return: %d", sqlca.sqlcode));
  DBUG_LEAVE();

  return sqlca.sqlcode;
}

error_t
orasql_execute_immediate(statement)
EXEC SQL BEGIN DECLARE SECTION;
const char *statement;
EXEC SQL VAR statement IS STRING;
EXEC SQL END DECLARE SECTION;
{
  DBUG_ENTER("orasql_execute_immediate");
  DBUG_PRINT("input", ("statement: %s", statement));

  LINT_FLAGS_PROC_BEGIN;
  EXEC SQL WHENEVER SQLERROR CONTINUE;

  EXEC SQL EXECUTE IMMEDIATE :statement;
  LINT_FLAGS_PROC_END;

  DBUG_PRINT("output", ("return: %d", sqlca.sqlcode));
  DBUG_LEAVE();

  return sqlca.sqlcode;
}

error_t
orasql_allocate_descriptor(descriptor_name, max_array_size)
EXEC SQL BEGIN DECLARE SECTION;
const char *descriptor_name;
EXEC SQL VAR descriptor_name IS STRING;
const unsigned int max_array_size;
EXEC SQL END DECLARE SECTION;
{
  DBUG_ENTER("orasql_allocate_descriptor");
  DBUG_PRINT("input", ("descriptor_name: %s; max_array_size: %u", descriptor_name, max_array_size));

  LINT_FLAGS_PROC_BEGIN;
  EXEC SQL FOR :max_array_size
    ALLOCATE DESCRIPTOR LOCAL :descriptor_name;
  LINT_FLAGS_PROC_END;
    
  DBUG_PRINT("output", ("return: %d", sqlca.sqlcode));
  DBUG_LEAVE();

  return sqlca.sqlcode;
}

error_t
orasql_parse(select_statement)
EXEC SQL BEGIN DECLARE SECTION;
const char *select_statement;
EXEC SQL VAR select_statement IS STRING;
EXEC SQL END DECLARE SECTION;
{
  DBUG_ENTER("orasql_parse");
  DBUG_PRINT("input", ("select_statement: %s", select_statement));

  /* Prepare the statement and declare a cursor. */
  LINT_FLAGS_PROC_BEGIN;
  EXEC SQL PREPARE S FROM :select_statement;
  EXEC SQL DECLARE C CURSOR FOR S;
  LINT_FLAGS_PROC_END;

  DBUG_PRINT("output", ("return: %d", sqlca.sqlcode));
  DBUG_LEAVE();

  return sqlca.sqlcode;
}

error_t
orasql_describe_input(descriptor_name)
EXEC SQL BEGIN DECLARE SECTION;
const char *descriptor_name;
EXEC SQL VAR descriptor_name IS STRING;
EXEC SQL END DECLARE SECTION;
{
  DBUG_ENTER("orasql_describe_input");
  DBUG_PRINT("input", ("descriptor_name: %s", descriptor_name));

  LINT_FLAGS_PROC_BEGIN;
  EXEC SQL DESCRIBE INPUT S USING DESCRIPTOR LOCAL :descriptor_name;
  LINT_FLAGS_PROC_END;
 
  DBUG_PRINT("output", ("return: %d", sqlca.sqlcode));
  DBUG_LEAVE();

  return sqlca.sqlcode;
}

error_t
orasql_value_count(descriptor_name, count)
EXEC SQL BEGIN DECLARE SECTION;
const char *descriptor_name;
EXEC SQL VAR descriptor_name IS STRING;
unsigned int *count;
EXEC SQL END DECLARE SECTION;
{
  DBUG_ENTER("orasql_value_count");
  DBUG_PRINT("input", ("descriptor_name: %s", descriptor_name));

  LINT_FLAGS_PROC_BEGIN;
  EXEC SQL GET DESCRIPTOR LOCAL :descriptor_name :count = COUNT; 
  LINT_FLAGS_PROC_END;

  DBUG_PRINT("output", ("count: %u; return: %d", *count, sqlca.sqlcode));
  DBUG_LEAVE();

  return sqlca.sqlcode;
}

error_t
orasql_value_get(descriptor_name, nr, value_description)
EXEC SQL BEGIN DECLARE SECTION;
const char *descriptor_name;
EXEC SQL VAR descriptor_name IS STRING;
unsigned int nr;
EXEC SQL END DECLARE SECTION;
value_description_t *value_description;
{
  DBUG_ENTER("orasql_value_get");
  DBUG_PRINT("input", ("descriptor_name: %s; nr: %u", descriptor_name, nr));

  {
    EXEC SQL BEGIN DECLARE SECTION;
    char *name = value_description->name;
    EXEC SQL VAR name IS STRING(30);
    int *type = &value_description->type;
    unsigned int *octet_length = &value_description->octet_length; /* length in bytes */
    unsigned int *length = &value_description->length; /* length in characters for NCHAR; in bytes otherwise */
    int *precision = &value_description->precision;
    int *scale = &value_description->scale;
    char *character_set_name = value_description->character_set_name;
    EXEC SQL VAR character_set_name IS STRING(20);
    unsigned int *national_character = &value_description->national_character;
    unsigned int *internal_length = &value_description->internal_length;  
    EXEC SQL END DECLARE SECTION;

    LINT_FLAGS_PROC_BEGIN;
    EXEC SQL GET DESCRIPTOR LOCAL :descriptor_name VALUE :nr 
      :name = NAME,
      :type = TYPE,
      :octet_length = OCTET_LENGTH,
      :length = LENGTH,
      :precision = PRECISION,
      :scale = SCALE,
      :character_set_name = CHARACTER_SET_NAME,
      :national_character = NATIONAL_CHARACTER,
      :internal_length = INTERNAL_LENGTH;
    LINT_FLAGS_PROC_END;

    print_value_description(value_description);
  }
  
  DBUG_PRINT("output", ("return (sqlca.sqlcode): %d", sqlca.sqlcode));
  DBUG_LEAVE();

  return sqlca.sqlcode;
}

error_t
orasql_value_set(descriptor_name, nr, array_size, value_description, data, ind, returned_length)
EXEC SQL BEGIN DECLARE SECTION;
const char *descriptor_name;
EXEC SQL VAR descriptor_name IS STRING;
const unsigned int nr;
const unsigned int array_size;
const char *data;
const short *ind;
EXEC SQL END DECLARE SECTION;
const orasql_size_t *returned_length;
value_description_t *value_description;
{
  DBUG_ENTER("orasql_value_set");
  DBUG_PRINT("input",
             ("descriptor_name: %s; nr: %u; array_size: %u; data: %p; ind: %p; returned_length: %p",
              descriptor_name,
              nr,
              array_size,
              data,
              ind,
              returned_length));
  
  print_value_description(value_description);

  {
    EXEC SQL BEGIN DECLARE SECTION;
    int type = value_description->type;
    unsigned int length = value_description->length; /* length in characters */
    char *character_set_name = value_description->character_set_name;
    EXEC SQL VAR character_set_name IS STRING(20);
    const unsigned short *returned_length_ptr = (unsigned short *)returned_length;
    EXEC SQL END DECLARE SECTION;

    DBUG_PRINT("info", ("#1"));

    LINT_FLAGS_PROC_BEGIN;
    EXEC SQL SET DESCRIPTOR LOCAL :descriptor_name VALUE :nr
      TYPE = :type,
      LENGTH = :length,
      CHARACTER_SET_NAME = :character_set_name;

    DBUG_PRINT("info", ("#2"));
    
    EXEC SQL FOR :array_size
      SET DESCRIPTOR LOCAL :descriptor_name VALUE :nr
      REF DATA = :data, REF INDICATOR = :ind, REF RETURNED_LENGTH = :returned_length_ptr;
    LINT_FLAGS_PROC_END;
  }

  DBUG_LEAVE();

  return sqlca.sqlcode;
}

error_t
orasql_open_cursor(descriptor_name)
EXEC SQL BEGIN DECLARE SECTION;
const char *descriptor_name;
EXEC SQL VAR descriptor_name IS STRING;
EXEC SQL END DECLARE SECTION;
{
  DBUG_ENTER("orasql_open_cursor");
  DBUG_PRINT("input", ("descriptor_name: %s", descriptor_name));

  /* Open the cursor and execute the statement. */
  LINT_FLAGS_PROC_BEGIN;
  EXEC SQL
    OPEN C USING DESCRIPTOR LOCAL :descriptor_name;
  LINT_FLAGS_PROC_END;

  DBUG_PRINT("output", ("return: %d", sqlca.sqlcode));
  DBUG_LEAVE();

  return sqlca.sqlcode;
}

error_t
orasql_describe_output(descriptor_name)
EXEC SQL BEGIN DECLARE SECTION;
const char *descriptor_name;
EXEC SQL VAR descriptor_name IS STRING;
EXEC SQL END DECLARE SECTION;
{
  DBUG_ENTER("orasql_describe_output");
  DBUG_PRINT("input", ("descriptor_name: %s", descriptor_name));

  LINT_FLAGS_PROC_BEGIN;
  EXEC SQL DESCRIBE OUTPUT S USING DESCRIPTOR LOCAL :descriptor_name;
  LINT_FLAGS_PROC_END;
 
  DBUG_PRINT("output", ("return: %d", sqlca.sqlcode));
  DBUG_LEAVE();

  return sqlca.sqlcode;
}

error_t
orasql_fetch_rows(descriptor_name, array_size, count)
EXEC SQL BEGIN DECLARE SECTION;
const char *descriptor_name;
EXEC SQL VAR descriptor_name IS STRING;
const unsigned int array_size;
EXEC SQL END DECLARE SECTION;
unsigned int *count;
{
  DBUG_ENTER("orasql_fetch_rows");
  DBUG_PRINT("input", ("descriptor: %s; array_size: %u", descriptor_name, array_size));

  switch (sqlca.sqlcode)
    {
    case NO_DATA_FOUND:
      *count = 0;
      sqlca.sqlcode = OK;
      break;

    case OK:
      *count = (unsigned int) sqlca.sqlerrd[2]; /* save old cumulative count */

      LINT_FLAGS_PROC_BEGIN;
      EXEC SQL WHENEVER NOT FOUND CONTINUE;
      EXEC SQL FOR :array_size 
        FETCH C INTO DESCRIPTOR LOCAL :descriptor_name;
      LINT_FLAGS_PROC_END;

      *count = (unsigned int) sqlca.sqlerrd[2] - *count; /* fetch count */
      break;

    default:
      break;
    }

  DBUG_PRINT("output", ("count: %u; return: %d", *count, sqlca.sqlcode));
  DBUG_LEAVE();

  /* when no data is found (sqlca.sqlcode == NO_DATA_FOUND) the next orasql_fetch_rows() must return *count == 0 */
  return sqlca.sqlcode == NO_DATA_FOUND ? OK : sqlca.sqlcode;
}

error_t
orasql_rows_processed(unsigned int *count)
{
  *count = (unsigned int) sqlca.sqlerrd[2];

  if (sqlca.sqlcode == NO_DATA_FOUND)
    {
      sqlca.sqlcode = OK;
    }

  return sqlca.sqlcode;
}

error_t
orasql_close_cursor(void)
{
  DBUG_ENTER("orasql_close_cursor");

  LINT_FLAGS_PROC_BEGIN;
  EXEC SQL CLOSE C;
  LINT_FLAGS_PROC_END;

  DBUG_PRINT("output", ("return: %d", sqlca.sqlcode));
  DBUG_LEAVE();

  return sqlca.sqlcode;
}

error_t
orasql_deallocate_descriptor(descriptor_name)
EXEC SQL BEGIN DECLARE SECTION;
const char *descriptor_name;
EXEC SQL VAR descriptor_name IS STRING;
EXEC SQL END DECLARE SECTION;
{
  DBUG_ENTER("orasql_deallocate_descriptor");
  DBUG_PRINT("input", ("descriptor_name: %s", descriptor_name));

  LINT_FLAGS_PROC_BEGIN;
  EXEC SQL DEALLOCATE DESCRIPTOR LOCAL :descriptor_name;
  LINT_FLAGS_PROC_END;
    
  DBUG_PRINT("output", ("return: %d", sqlca.sqlcode));
  DBUG_LEAVE();

  return sqlca.sqlcode;
}

void
orasql_error(unsigned int *length, char **msg)
{
  *length = (unsigned int) sqlca.sqlerrm.sqlerrml;
  *msg = (char *) sqlca.sqlerrm.sqlerrmc;
}
